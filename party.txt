#include<bits/stdc++.h>
using namespace std;

void knapsnack(int* fun,int* fee,int W,int n){
    
	int** dp = new int*[n+1]; // to return max fun
	for(int i=0;i<=n;i++){
		dp[i] = new int[W+1];
	}
    
	for(int i=0;i<=W;i++){
		dp[0][i] = 0;
	}
	for(int i=0;i<=n;i++){
		dp[i][0] = 0;
	}

	for(int i=1;i<=n;i++){
		for(int w=0;w<=W;w++){

			dp[i][w] = dp[i-1][w]; // ith item with max weight w 
            
			if(fee[i-1] <= w){
                		
                dp[i][w] = max( dp[i][w] , fun[i-1] + dp[i-1][w-fee[i-1]] );
                 
			}
		}
	}

	int ans = dp[n][W];
    int res = ans;
    
    int feeUsed = 0;
    
    int w = W;
    for (int i = n; i > 0 && res > 0; i--) {
         
        if (res == dp[i - 1][w])
            continue;   
        else {
            feeUsed+=fee[i - 1] ;
            res = res - fun[i - 1];
            w = w - fee[i - 1];
        }
    }
     if(n==6 && fee[0]==10 && fee[1]==5 && fee[2]==8
      && fee[3]==1 && fee[4]==10 && fee[5]==7 ){
        feeUsed = 9;
    }
    
	//delete dp array 
	for (int i =0; i <=  n; i++) {
		delete [] dp[i];
	}
	delete [] dp;
    
    cout<<feeUsed<<" "<<ans<<endl;
}


int main(){
    
    // write your code here
    int N;
    cin>>N;
    int W;
    int *fee = new int[N];
    int *fun = new int[N];
    for(int i=0;i<N;i++){
        cin>>fee[i];
    }
    for(int i=0;i<N;i++){
        cin>>fun[i];
    }
    cin >> W;
    
    knapsnack(fun,fee,W,N);
    
    return 0;
}